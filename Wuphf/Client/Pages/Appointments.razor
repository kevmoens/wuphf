@page "/appointments"
@inject HttpClient Http
@using Wuphf.Shared
@using Wuphf.Shared.Appointments
@using Wuphf.Client.Models

<div class="container">
    <div class="listContainer">
        <div><button class="btn btn-primary" @onclick="OnAdd">Add</button></div>
        <div class="listTable">
            <table class="table">
                <thead>
                <td>Appointments</td>
                <td></td>
                <td></td>
                </thead>
                <tbody>
                    @foreach (var appt in appointments)
                    {
                        <tr>
                            <td>@appt.Description</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => OnEdit(appt)">
                                    <span class="oi oi-pencil"></span>
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => OnRemove(appt)">
                                    <span class="oi oi-x"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>


    <div class="detailContainer">
        @if (hasSelectedAppointment)
        {
            <EditForm Model="@selectedAppointment" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                
                <div>
                    <input type="text" @bind-value="selectedAppointment.Description" />
                    Time: <input type="time" @bind-value="selectedAppointment.ScheduleTime" />
                </div>
                <div class="reoccuranceContainer">
                    <div>
                        Reoccurance:<br />
                        <InputRadioGroup Name="reoccurance" @bind-Value="selectedAppointment.Reoccurance">
                            <InputRadio Name="reoccurance" Value="ReoccuranceTypes.None" />
                            None<br>
                            <InputRadio Name="reoccurance" Value="ReoccuranceTypes.Daily" />
                            Daily<br>
                            <InputRadio Name="reoccurance" Value="ReoccuranceTypes.Weekly" />
                            Weekly
                        </InputRadioGroup>
                    </div>
                    <div>
                        <div>
                            <input type="checkbox" @bind="dayOfWeekAppointment.Sunday"/> Sunday
                        </div>
                        <div>
                            <input type="checkbox" @bind="dayOfWeekAppointment.Monday" /> Monday
                        </div>
                        <div>
                            <input type="checkbox" @bind="dayOfWeekAppointment.Tuesday" /> Tuesday
                        </div>
                        <div>
                            <input type="checkbox" @bind="dayOfWeekAppointment.Wednesday" /> Wednesday
                        </div>
                        <div>
                            <input type="checkbox" @bind="dayOfWeekAppointment.Thursday" /> Thursday
                        </div>
                        <div>
                            <input type="checkbox" @bind="dayOfWeekAppointment.Friday" /> Friday
                        </div>
                        <div>
                            <input type="checkbox" @bind="dayOfWeekAppointment.Saturday" /> Saturday
                        </div>
                    </div>
                </div>
                <div>
                    End Date: <input type="date" @bind-value="selectedAppointment.EndDate" />
                </div>
                <div>
                    <button class="btn btn-primary" type="submit">Save</button>
                </div>
            </EditForm>
        }
    </div>
</div>
    @code {
        private bool hasSelectedAppointment;
        private Appointment selectedAppointment;
        public Appointment SelectedAppointment { get { return selectedAppointment; } set { selectedAppointment = value; dayOfWeekAppointment.Appointment = value; } }
        private DayOfWeekAppointment dayOfWeekAppointment = new DayOfWeekAppointment();
        private List<Appointment> appointments = new List<Appointment>();
        protected override async Task OnInitializedAsync()
        {
            var result = await Http.GetFromJsonAsync<Appointment[]>("Appointment");
            appointments = result?.ToList();
        }
        public void OnAdd()
        {
            if (appointments == null)
            {
                appointments = new List<Appointment>();
            }
            SelectedAppointment = new Appointment();
            hasSelectedAppointment = true;
            SelectedAppointment.StartDate = DateTime.Today;
            appointments.Add(SelectedAppointment);
            StateHasChanged();
        }
        public void OnEdit(Appointment appt)
        {
            SelectedAppointment = appt;
            hasSelectedAppointment = true;
            StateHasChanged();
        }
        public async void OnRemove(Appointment appt)
        {
            await Http.DeleteAsync($"Appointment/{appt.AppointmentID}");
            appointments.Remove(appt);
            if (appt == selectedAppointment)
            {
                selectedAppointment = null;
                hasSelectedAppointment = false;
            }
            StateHasChanged();
        }

        private async void HandleValidSubmit()
        {
            //Add or Update
            await Http.PostAsJsonAsync<Appointment>("Appointment", selectedAppointment);
        }


    }
