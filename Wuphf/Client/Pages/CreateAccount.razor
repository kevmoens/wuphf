@page "/createaccount"
@using Wuphf.Shared
@inject NavigationManager navigationManager
@inject HttpClient Http

<div class="container">
    <div class="centered-username">

        <input placeholder="username" type="text" @bind-value="username">
    </div>
    <div class="centered-password">
        <input placeholder="password" type="password" @bind-value="password">
    </div>
    <div class="centered-create">
        <button type="button" class="btn btn-outline-primary btn-border centered-create" @onclick="OnCreate"> Create</button>
    </div>
    <div>
        <button type="button" class="btn btn-outline-danger btn-border" @onclick="OnGoBack">Go back</button>
    </div>
</div>




<Modal @ref="modal">
    <Title>Error</Title>
    <Body>
        <p>
            Account already exists!
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => modal.Close()">Close</button>
    </Footer>
</Modal>

@code {
    private Modal modal { get; set; }

    private string username;
    private string password;
    public async Task OnCreate()
    {
        var account = await Http.GetFromJsonAsync<Account>($"Account/{username}");
        if (account != null && !string.IsNullOrEmpty(account.UserName))
        {
            modal.Open();
            StateHasChanged();
            return;
        }
        var newAccount = new Account() { UserName = username, Password = password };

        var result = await Http.PostAsJsonAsync<Account>("Account", newAccount);
        if (!result.IsSuccessStatusCode)
        {
            System.Diagnostics.Debug.Print(result.ReasonPhrase);
            return;
        }
        var content = await result.Content.ReadAsStringAsync();

        navigationManager.NavigateTo("Home");
    }

    public void OnGoBack()
    {
        navigationManager.NavigateTo("");
    }
}
